# Comprehensive MCP Debugging Tools Test Protocol

## Project Overview

This project involves systematically testing the newly implemented universal MCP debugging tools for the PsyPsy CMS healthcare management system. The goal is to validate that all namespace refactoring and universal tool access is working correctly across desktop application debugging scenarios.

## Background

The psypsy-cms-debugger MCP server has been enhanced with universal debugging capabilities that should work seamlessly across Tauri and Electron applications without requiring project-specific prefixes or opcode constraints.

## Key Requirements

### 1. MCP Connection Validation
- Verify psypsy-cms-debugger shows "Status: âœ” connected"
- List all available debugging tools
- Confirm desktop debugging functions are accessible

### 2. Tauri Application Debug Testing
- Launch Tauri development applications
- Capture JavaScript console messages from WebView
- Capture runtime errors with stack traces
- Take screenshots during debugging sessions
- Manage application lifecycle (start/stop/list)

### 3. Electron Application Debug Testing
- Launch Electron applications
- Execute JavaScript code in app context
- Reload applications during debugging
- Track multiple running processes
- Clean termination of applications

### 4. Universal Functionality Validation
- Cross-platform application management
- AI autofix system functionality
- Healthcare compliance features (PsyPsy context)
- Real-time console and error capture

### 5. Error Handling & Edge Cases
- Invalid path handling
- Non-existent application management
- Deliberate JavaScript error testing
- Proper cleanup verification

### 6. Project Context Independence
- Tool functionality regardless of working directory
- PROJECT_CONTEXT environment handling
- Universal accessibility without prefixes
- Cross-project compatibility

## Success Criteria

- All MCP tools load without "tool not found" errors
- Tauri apps launch and are trackable via Chrome DevTools Protocol
- Console messages and errors are captured in real-time
- Process management works reliably across platforms
- No opcode-specific prefixes required for tool access
- Tools work from any project directory
- Healthcare compliance features activate appropriately

## Testing Phases

### Phase 1: Connection & Tool Discovery
Basic MCP server connectivity and tool enumeration

### Phase 2: Tauri Integration Testing
Complete Tauri application debugging workflow validation

### Phase 3: Electron Integration Testing
Full Electron application debugging capabilities

### Phase 4: Universal Features Testing
Cross-platform and AI-powered debugging features

### Phase 5: Error Handling Validation
Edge case and error condition testing

### Phase 6: Context Independence Verification
Project-agnostic functionality validation

## Expected Deliverables

1. Connection Status Report: MCP server connection details
2. Tool Availability Assessment: Complete list of accessible debugging tools
3. Functional Test Results: App launching, console capture, error detection outcomes
4. Edge Case Analysis: Error handling and invalid input management
5. Universal Access Confirmation: Project-independent tool functionality
6. Issue Documentation: Problems encountered and resolution strategies

## Healthcare Context Considerations

Given the PsyPsy CMS healthcare context, special attention should be paid to:
- HIPAA compliance features during debugging
- PHI data handling in debug scenarios
- Quebec Law 25 requirements for debugging tools
- Medical application-specific debugging patterns

## Technical Constraints

- Must work with Tauri 2.1+ applications
- Electron compatibility across versions
- Chrome DevTools Protocol integration
- Real-time debugging capabilities
- No dependency on specific project structures
